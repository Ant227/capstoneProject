package com.example.android.politicalpreparedness.repositoryimport androidx.lifecycle.LiveDataimport androidx.lifecycle.Transformationsimport com.example.android.politicalpreparedness.database.ElectionDatabaseimport com.example.android.politicalpreparedness.network.CivicsApiimport com.example.android.politicalpreparedness.network.models.Divisionimport com.example.android.politicalpreparedness.network.models.Electionimport com.example.android.politicalpreparedness.network.models.Followimport com.example.android.politicalpreparedness.network.models.VoterInfoResponseimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.withContextimport timber.log.Timberclass ElectionsRepository(private val electionDatabase: ElectionDatabase) {        val followedElections: LiveData<List<Election>> = electionDatabase.electionDao                .getFollowedElections()        val upcomingElections: LiveData<List<Election>> = electionDatabase.electionDao               .getAllElections()    suspend fun getElection(id: Int) : Election{      return  electionDatabase.electionDao.getElection(id)    }    suspend fun saveElection(id: Int) {        withContext(Dispatchers.IO) {            electionDatabase.electionDao.insertFollowed(id)            Timber.i("insert")        }    }    suspend fun unfollowElection(id: Int){        withContext(Dispatchers.IO){            electionDatabase.electionDao.unFollow(id)            Timber.i("unfollow")        }    }}